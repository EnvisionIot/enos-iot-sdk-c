CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(enos-api-sdk-c)

MACRO(SUBDIRLIST result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
    SET(dirlist "")
    FOREACH(child ${children})
        IF(IS_DIRECTORY ${curdir}/${child})
            LIST(APPEND dirlist ${child})
        ENDIF()
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

IF(DEBUG_MODE)
ADD_DEFINITIONS("-g -DDEBUG_MODE")
ENDIF()

IF(PLATFORM_DEFINE STREQUAL "linux_x86_normal_64_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_x86_centos6_32_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_armv7l_moxa_32_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "win_x86_mingw_32_local")
    SET(OS_DEFINE "windows")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
ELSEIF(PLATFORM_DEFINE STREQUAL "win_x86_msvc_32_local")
    SET(OS_DEFINE "windows")
    SET(SH_TYPE "bat")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_mipsel_openwrt_32_cross")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_SYSTEM_NAME Linux)
ELSE()
    MESSAGE("supported PLATFORM_DEFINE list:")
    MESSAGE("linux_x86_normal_64_local")
    MESSAGE("win_x86_mingw_32_local")
    MESSAGE("win_x86_msvc_32_local")
    MESSAGE("linux_mipsel_openwrt_32_cross")
    MESSAGE(FATAL_ERROR "undefined PLATFORM_DEFINE ${PLATFORM_DEFINE}")
ENDIF()

IF(ENABLE_TPM)
    ADD_DEFINITIONS("-DENABLE_TPM")
ENDIF()

SET(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/dst/lib")
SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/dst/bin")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/support/${PLATFORM_DEFINE}/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/support/${PLATFORM_DEFINE}/include/pthread")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/dst/lib")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/dst/lib/support/engines-1.1")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/dst/lib/support")
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(support)
ADD_SUBDIRECTORY(src)
#ADD_SUBDIRECTORY(app)
ADD_SUBDIRECTORY(test)
